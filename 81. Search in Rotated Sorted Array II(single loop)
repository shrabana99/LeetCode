// without duplicates case fails at 
/*
[1, 1, 1, 1, 1, 1, 1, 3, 1]
3
[1, 1, 1, 1, 1, 1, 3, 0, 1]
3
*/
// passes at
/*
[1, 3, 1, 1, 1, 1, 1, 1, 1]
3
*/

// if l, r, md are same reduce the range to (l+1, r-1)
// else if a[r] <= a[md], 1st half is in order, 
//else 2nd half is in order, 

class Solution {
public:
    bool search(vector<int>& a, int t) {
        bool ans = false;
        int n = a.size();
        if(n == 0) return ans;
        
        int l = 0, r = n-1;
        while(l <= r){
            int md = (l+r)/2;
            if(a[md] == t) {
                ans = true;
                break;
            }
            // if left right md are same 
            if(a[l] == a[md] && a[md] == a[r]) l++, r--;
            
            else if(a[l] <= a[md]){ // l to md is increasing 
                if(a[l] <= t &&  t < a[md]){ // t is in between (l, md-1);
                    r = md - 1;
                }
                else{ // shift l to md + 1
                    l = md + 1;
                }
            }
            else{ // md to r is increasing 
                if(a[md] < t && t <= a[r]){ // t is in between (md+1, r);
                    l = md + 1;
                }
                else r = md - 1;
            }
        }
        return ans;
    }
};
