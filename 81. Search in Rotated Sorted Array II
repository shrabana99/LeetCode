// without duplicates case fails at 
/*
[1, 1, 1, 1, 1, 1, 1, 3, 1]
3
[1, 1, 1, 1, 1, 1, 3, 0, 1]
3
*/
// passes at
/*
[1, 3, 1, 1, 1, 1, 1, 1, 1]
3
*/

// so if pivot is 0 we need to we need to check from the back where 
// the actual pivot is lying 
// thus worst case will be o(n) for cases like 1 1 1 1 1 1 1 1

class Solution {
public:
    bool search(vector<int>& a, int target) {
        bool ans = false;
        int n = a.size();
        if(n == 0) return ans;
        // first find the pivot
        int l = 0, r = n-1;
        while(l < r){
            int md = (l+r)/2;
            if(a[md] > a[n-1])  
                l = md + 1;
            else r = md;
        } 
        if(l == 0){
            for(int i = n-1; i >= 0; i--){
                if(a[i] <= a[l]) l = i;
                else break;
            }
        }
        
        //cout << l << " ";
        
        if(target <= a[n-1]) r = n-1;
        else{
            r = l-1;
            l = 0;
        }
        
        while(l <= r){
            int md = (l+r)/2;
            if(a[md] == target) {
                ans = true;
                break;
            }
            if(a[md] < target) l = md + 1;
            else r = md - 1;
        }
        return ans;
    }
};
