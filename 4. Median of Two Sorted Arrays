//using kth smallest element in the merged array
//https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2588/O(lg(m%2Bn))-c%2B%2B-solution-using-kth-smallest-number

class Solution {
    typedef vector<int> vec;
public:
    double findMedianSortedArrays(vector<int>& a1, vector<int>& a2) {
        int n = a1.size(), m = a2.size(); 
        int k = (m+n)/2;
        if((m+n)%2 == 0){
            return (kth(a1, 0, n, a2, 0, m, k) + kth(a1, 0, n, a2, 0, m, k+1))/2.0;
        }
        else{
            return kth(a1, 0, n, a2, 0, m, k+1);
        }
    }
    
private:
    // returns kth smallest element in the merged array
    int kth(vec &a1, int l1, int len1, vec &a2, int l2, int len2, int k){
        
        //len2 > len1 always
        if(len1 > len2) 
            return kth(a2, l2, len2, a1, l1, len1, k); 
        
        // base case
        if(len1 == 0) { 
            return a2[l2 + k-1];
        }
        if(k == 1){
            return min(a1[l1], a2[l2]);
        }
        
        //take k/2 elements from left of a1 
        int take1 = min(k/2, len1);
        //or take k - k/2 elements from left of a2
        int take2 = k - take1;
        
        if(a1[l1 + take1-1] == a2[l2 + take2-1])
            return a1[l1 + take1-1];
        else if(a1[l1 + take1-1] < a2[l2 + take2-1])
            return kth(a1, l1+take1, len1-take1, a2, l2, len2, k - take1);
        else 
            return kth(a1, l1, len1, a2, l2+take2, len2-take2, k - take2);
        
    }
    
};
