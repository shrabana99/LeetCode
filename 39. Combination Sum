class Solution {
    typedef vector<int> vec;
public:
    vector<vector<int>> combinationSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vec> ans;
        vec tmp;
        solve(ans, nums, tmp, target, 0);
        return ans;
    }
    
private:
    void solve(vector<vec> &ans, vec &nums, vec &tmp, int target, int p){
        if(target == 0){
            ans.push_back(tmp);
            return;
        }
        for(int i = p; i < nums.size(); i++){
            if(target < nums[i]) continue;
            tmp.push_back(nums[i]);
            solve(ans, nums, tmp, target-nums[i], i); // not i+1 because we can reuse same elements
            tmp.pop_back();
        }
    }
};
