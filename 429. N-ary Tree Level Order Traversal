/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> ans;
        queue<pair<int, Node*>> q;
        q.push({1, root});
        int lev = 0;
        vector<int> tmp;
        //tmp.push_back(root->val);
        while(!q.empty()){
            pair<int, Node*>t = q.front();
            q.pop();
            int l = t.first;
            Node* rt = t.second;
            if(rt == NULL)
                continue;
             
            if(lev != l){
                if(!tmp.empty())ans.push_back(tmp);
                tmp.clear();
                lev = l;
            }
            tmp.push_back(rt->val);        
            for(int i = 0; i < rt->children.size(); i++){
                //cout << rt->children[i]->val<<" ";
                q.push({l+1, rt->children[i]});
            }//cout << endl;
        }
        if(!tmp.empty())ans.push_back(tmp);
        
        return ans;
    }
};
