// A = [8, -7, 2, 3, 4]  K = 9, ans = 3
// A = [8, -7, 2, -3, 9] K = 9, ans = 1

// as negative numbers are present , prefix sum will not be in increasing order
// in case 1, prefix sum p[]= 8, 1, 3, 6, 10 

// we want range [x, y] such that p[y]-p[x] >= K and (y-x) is minimum
// so for all possible candidates of [xi, yi], p[yi] >= p[xi] , yi > xi
// so we maintain queue where y values are increasing , (with deque)
// p[y] < p[x_back], we can pop back of the queue
// as we need to maintain increasing order of queue(discard useless x)
// if p[y] - p[x_front] >= k, we can pop front of the queue
// as we dont need this x anymore (minimize (y-x) )

/* A = [8, -7, 2, 3, 4]  K = 9
p[]= 8, 1, 3, 6, 10 , queue will store the positions of y 
i = 0, p[0] = 8, q = 0
i = 1, p[1] < p[0], 0 popped back, q=1
i = 2, p[2] > p[1],  q=1,2
i = 3, p[3] > p[2],  q=1,2,3
i = 4, p[4] > p[3],  q=1,2,3
        p[4] - p[q[0]] >= 9, 1 popped front, ans = 4-1 = 3
        p[4] - p[q[0]] < 9, nothing happens, q = 2,3,4

*/

class Solution {
public:
    int shortestSubarray(vector<int>& A, int K) {
        deque<int> q;
        int ans = A.size()+1;
        for(int i = 0; i < A.size(); i++){
            if (i > 0){
                A[i] += A[i - 1];
            }
            if (A[i] >= K){
                ans = min(ans, i + 1);
            }
            while(q.size() > 0 && A[i] < A[q.back()]){ 
                q.pop_back();
            }
            while(q.size() > 0 && A[i] - A[q.front()] >= K){
                ans = min(ans, i - q.front()); 
                q.pop_front();
            }
            q.push_back(i);
            
        }
        return (ans != A.size()+1 ? ans : -1);
    }
};
