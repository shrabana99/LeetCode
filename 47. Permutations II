// https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)
class Solution {
    typedef vector<int> vec;
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vec> ans;
        vec used(nums.size(), 0), tmp;
        solve(ans, nums, used, tmp);
        return ans;
    }
    
private:
    void solve(vector<vec> &ans, vec &nums, vec &used, vec &tmp){
        if(tmp.size() == nums.size()){
            ans.push_back(tmp);
        }
        else{
            for(int i = 0; i < nums.size(); i++){
                if(used[i]) continue; //already present
                if(i > 0 && nums[i] == nums[i-1] && used[i-1]) continue; // duplicate already present 
                tmp.push_back(nums[i]);
                used[i] = 1;
                
                solve(ans, nums, used, tmp);
                
                tmp.pop_back();
                used[i] = 0;
            }
        }
    }
};
