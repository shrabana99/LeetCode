class Solution {
    typedef vector<int> vec;
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        vec col(n, 0), diag1(2*n-1, 0), diag2(2*n-1, 0);
        solve(ans, board, col, diag1, diag2, 0, n); 
        return ans;
    }
private:
    void solve(vector<vector<string>>&ans, vector<string> &board,
              vec &col, vec &diag1, vec &diag2, int row, int n){
        
        if(row == n) {
            ans.push_back(board);
            return;
        }
        
        for(int i = 0; i < n; i++){
            if(!col[i] && !diag1[i + row] && !diag2[i + n-1-row] ){
                board[row][i] = 'Q'; 
                col[i] = diag1[i + row] = diag2[i + n-1-row] = 1;
                
                solve(ans, board, col, diag1, diag2, row+1, n);
                
                board[row][i] = '.';
                col[i] = diag1[i + row] = diag2[i + n-1-row] = 0;
                
            }
        }
        
        
    }

};
