// 1st we need to find LCS
// then for each string, we will match with the LCS and
// insert characters in the LCS which are not found
// return modified LCS

class Solution {
public:
    string shortestCommonSupersequence(string s1, string s2) {
        int n = s1.size(), m = s2.size();
        int dp[n+1][m+1];
        // filling dp table
        for(int i = 0; i <= n; i++){
            for(int j = 0; j <= m; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 0;
                }
                else{
                    if(s1[i-1] == s2[j-1]){
                        dp[i][j] = dp[i-1][j-1]+1;
                    }
                    else{
                        dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                    }
                }
            }
        }
        
        //finding lcs
        string lcs;
        int p1 = n, p2 = m;
        while(p1 > 0 && p2 > 0){
            if(s1[p1-1] == s2[p2-1]){ // common
                lcs += s1[p1-1];
                p1--;
                p2--;
            }
            else{ // not common
                if(dp[p1][p2-1] > dp[p1-1][p2]){
                    lcs += s2[p2-1];
                    p2--;
                }
                else {
                    lcs += s1[p1-1];
                    p1--;
                }
            }
        }
        while(p1 > 0){
            lcs += s1[p1-1]; p1--;
        }
        while(p2 > 0){
            lcs += s2[p2-1]; p2--;
        }
        reverse(lcs.begin(), lcs.end());
        
        return lcs;
    }
};
