class Solution {
public:
    int dp[501][501];
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        int sum = 0;
        sum = accumulate(piles.begin(), piles.end(), sum);
        memset(dp, -1, sizeof(dp));
        int m = solve(0, n-1, sum, piles);
        //cout << m << " " << dp[0][n-1];
        if(m > sum - m)
            return true;
        else return false;
    }
    int solve(int l, int r, int sum, vector<int>& piles){
        if(l+1 == r)
            return max(piles[l], piles[r]);
        if(dp[l][r] != -1)
            return dp[l][r];
        dp[l][r] = max(sum - solve(l, r-1, sum-piles[r], piles), 
                       sum - solve(l+1, r, sum-piles[l], piles));
        return dp[l][r];
    }
};
